<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Ranking;
use AppBundle\Entity\Resultado;
use AppBundle\Entity\Pronostico;

/**
 * RankingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RankingRepository extends \Doctrine\ORM\EntityRepository
{



	public function calcular(){
		


		$em = $this->getEntityManager();

		$ranking = $em->getRepository("AppBundle:Ranking")->findAll();
		foreach ($ranking as $r) {
			$em->remove($r);
		}

		$usuarios = $em->getRepository("AppBundle:Usuario")->findBy(array("tipo" => "user"));
		$resultados = $em->getRepository("AppBundle:Resultado")->findBy(array("jugado" => true));

		
		foreach ($usuarios as $usuario) {				
			$acumulado_puntos = 0;
			foreach ($resultados as $resultado) {
				$pronostico = $em->getRepository("AppBundle:Pronostico")->findOneBy(array("usuario" => $usuario->getId(), "partido" => $resultado->getPartido()->getId(), "pronosticado" => true));
				if($pronostico != null){
					$puntos = $this->calcularPuntaje($resultado, $pronostico);
					$acumulado_puntos = $acumulado_puntos + $puntos;
				}				
			}
			$ranking = new Ranking();
			$ranking->setUsuario($usuario);
			$ranking->setPuntos($acumulado_puntos);
			$em->persist($ranking);
		}

		$em->flush();
		return "ok";

	}




	private function calcularPuntaje(Resultado $resultado, Pronostico $pronostico){

		$acumulado = 0;

		// Resultado
		if($pronostico->darGanador() == $resultado->darGanador()){
			$acumulado = $acumulado + 5;
		}


		// Resultado exacto
		if($resultado->getGolesLocal() == $pronostico->getGolesLocal()){
			if($resultado->getGolesVisitante() == $pronostico->getGolesVisitante()){
				$acumulado = $acumulado + 3;
			}
		}

		return $acumulado;


	}







}
